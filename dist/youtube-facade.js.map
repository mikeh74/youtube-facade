{"mappings":"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","sources":["<anon>","src/youtube-facade.js","src/facade.js","src/utils.js","src/loader.js"],"sourcesContent":["(() => {\n/**\n *\n * @param {string} url\n */ const $e1f0b8fa1ae2171c$var$addPreconnect = (url)=>{\n    const link = document.createElement('link');\n    link.rel = 'preconnect';\n    link.href = url;\n    document.head.appendChild(link);\n};\nconst $e1f0b8fa1ae2171c$export$e98dfb50c08bef6e = function() {\n    let preconnnectsAdded = false;\n    let preconnectUrls = [\n        'https://www.youtube-nocookie.com',\n        'https://www.google.com'\n    ];\n    return function() {\n        if (preconnnectsAdded) return;\n        preconnectUrls.forEach((url)=>{\n            $e1f0b8fa1ae2171c$var$addPreconnect(url);\n        });\n        preconnnectsAdded = true;\n    };\n}();\n/**\n * Get the youtube video id from the element data-youtube-id attribute\n * or the href attribute if the data-youtube-id attribute is not present\n *\n * @param {HTMLElement} el\n * @return {string} videoId\n */ function $e1f0b8fa1ae2171c$export$959b02de8653989e(el) {\n    let videoId = null;\n    videoId = el.getAttribute('data-youtube-id');\n    if (videoId) return videoId;\n    // parse href of the element and get the video id from the v parameter\n    const href = el.getAttribute('href');\n    try {\n        const url = new URL(href);\n        videoId = url.searchParams.get('v');\n    } catch (error) {\n        console.error(error);\n        return null;\n    }\n    return videoId;\n}\n// function to check viewport width is less than 400px and the user is on a\n// mobile device, and the user agent includes 'Intel Mac OS X'\nfunction $e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc() {\n    return window.innerWidth < 600 && navigator.userAgent.includes('Mobi');\n}\n/**\n * Delegate an event to a parent element\n *\n * @param {HTMLElement} parent - The parent element to delegate the event to\n * @param {string} eventType - The type of event to listen for\n * @param {string} selector - The selector for the child elements to delegate the event to\n * @param {Function} handler - The event handler function\n * @param {object} options - The options for the event listener\n */ function $e1f0b8fa1ae2171c$export$b93d41a1bb659592(parent, eventType, selector, handler, options = false) {\n    parent.addEventListener(eventType, function(event) {\n        const targetElement = event.target.closest(selector);\n        // this is that 'parent' element at this point\n        if (this.contains(targetElement)) handler.call(targetElement, event);\n    }, options);\n}\n\n\n// ------ YouTube Iframe API ------\n// The API will call this function when the video player is ready.\nfunction $4974b39a59fdb5c5$var$onPlayerReady(event) {\n    event.target.playVideo();\n}\nlet $4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded = false;\nlet $4974b39a59fdb5c5$var$youTubeIframeAPIPromise = null;\nasync function $4974b39a59fdb5c5$var$loadYouTubeIframeAPI() {\n    if ($4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded) {\n        let YT = window.YT;\n        return Promise.resolve(YT);\n    }\n    if ($4974b39a59fdb5c5$var$youTubeIframeAPIPromise) return $4974b39a59fdb5c5$var$youTubeIframeAPIPromise;\n    $4974b39a59fdb5c5$var$youTubeIframeAPIPromise = new Promise((resolve)=>{\n        var tag = document.createElement('script');\n        tag.src = 'https://www.youtube.com/iframe_api';\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n        window.onYouTubeIframeAPIReady = ()=>{\n            let YT = window.YT;\n            $4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded = true;\n            resolve(YT);\n        };\n    });\n    return $4974b39a59fdb5c5$var$youTubeIframeAPIPromise;\n}\nasync function $4974b39a59fdb5c5$export$8ad0bd517c8ab34a(elementId, videoId, playerVars) {\n    const YT = await $4974b39a59fdb5c5$var$loadYouTubeIframeAPI();\n    return new YT.Player(elementId, {\n        width: '720',\n        height: '405',\n        videoId: videoId,\n        allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n        playerVars: playerVars,\n        events: {\n            onReady: $4974b39a59fdb5c5$var$onPlayerReady\n        }\n    });\n}\n\n\n/**\n * Render a youtube player using the youtube iframe api\n *\n * @param {HTMLElement} el\n * @param {String} videoId\n * @param {Array} playerVars\n */ function $8d52dbee1a55c811$var$renderYoutubePlayer(el, videoId, playerVars) {\n    // check if the element has the data-youtube-modal attribute\n    const modal = el.getAttribute('data-youtube-modal');\n    let target = el;\n    if (modal) {\n        const modalPlaceholder = document.getElementById('youtube-facade-modal-placeholder');\n        // create a new iframe element to insert into the modal placeholder element\n        const newDiv = document.createElement('div');\n        newDiv.classList.add('youtube-facade-iframe');\n        modalPlaceholder.appendChild(newDiv);\n        target = newDiv;\n        $8d52dbee1a55c811$var$toggleModal();\n    }\n    (0, $4974b39a59fdb5c5$export$8ad0bd517c8ab34a)(target, videoId, playerVars).then((player)=>{\n        // console.log(player);\n        window.yfplayer = player;\n    });\n}\n/**\n * Render a youtube iframe element\n *\n * @param {HTMLElement} el\n * @param {String} videoId\n * @param {Array} playerVars\n */ function $8d52dbee1a55c811$var$renderYouTubeIframe(el, videoId, playerVars) {\n    const iframe = $8d52dbee1a55c811$var$createYouTubeIframe(videoId, playerVars);\n    // check if the element has the data-youtube-modal attribute\n    const modal = el.getAttribute('data-youtube-modal');\n    if (modal) {\n        // toggle the modal\n        $8d52dbee1a55c811$var$toggleModal();\n        const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n        modalContent.appendChild(iframe);\n    } else // replace the element with the iframe\n    el.replaceWith(iframe);\n}\nfunction $8d52dbee1a55c811$var$createYouTubeIframe(videoId, playerVars) {\n    // convert playerVars object to query string\n    const playerVarsString = new URLSearchParams(playerVars).toString();\n    const iframe = document.createElement('iframe');\n    iframe.setAttribute('src', `https://www.youtube-nocookie.com/embed/${videoId}?${playerVarsString}`);\n    iframe.setAttribute('width', '720');\n    iframe.setAttribute('height', '405');\n    iframe.setAttribute('class', 'youtube-facade-iframe');\n    iframe.setAttribute('frameborder', '0');\n    iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');\n    iframe.setAttribute('allowfullscreen', '');\n    return iframe;\n}\n// on DomContentLoaded add modal code to the body\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const modal = document.createElement('div');\n    modal.classList.add('youtube-facade-modal');\n    modal.innerHTML = `\n      <div class=\"youtube-facade-modal-content\">\n        <button class=\"youtube-facade-modal-close\" aria-label=\"Close modal\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path class=\"youtube-facade-model-close-svg\" fill=\"#ffffff\" d=\"M 16.830797 20.000301 L 10.000151 13.16957 L 3.169428 20.000301 L -0 16.830883 L 6.830741 10.000151 L -0 3.169418 L 3.169428 0 L 10.000151 6.830732 L 16.830797 0 L 20 3.169418 L 13.16958 10.000151 L 20 16.830883 Z\"/>\n          </svg>\n        </button>\n        <div class=\"youtube-facade-modal-content-inner\">\n          <div id=\"youtube-facade-modal-placeholder\" class=\"youtube-facade-modal-inner\"></div>\n        </div>\n      </div>\n    `;\n    document.body.appendChild(modal);\n    // ------ Wire up the close button ------\n    const closeButtons = document.querySelectorAll('.youtube-facade-modal-close');\n    closeButtons.forEach((button)=>{\n        button.addEventListener('click', ()=>{\n            $8d52dbee1a55c811$var$closeModal();\n        });\n    });\n    // ------ Wire up the escape key ------\n    // add event listener for ESC key and close the modal if it is open\n    document.addEventListener('keydown', (e)=>{\n        if (e.key === 'Escape' || e.key === 'Esc') $8d52dbee1a55c811$var$closeModal();\n    });\n});\nconst $8d52dbee1a55c811$var$toggleModal = ()=>{\n    const modal = document.querySelector('.youtube-facade-modal');\n    modal.classList.toggle('youtube-facade-modal-active');\n};\nconst $8d52dbee1a55c811$var$closeModal = ()=>{\n    requestAnimationFrame(()=>{\n        const modal = document.querySelector('.youtube-facade-modal');\n        const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n        modalContent.innerHTML = '';\n        // remove class last\n        modal.classList.remove('youtube-facade-modal-active');\n    });\n};\n/**\n * Initialize the youtube facade\n *\n * @param {object} options\n * @param {string} options.selector\n * @param {boolean} options.muteForAutoplay\n */ const $8d52dbee1a55c811$var$youtubeFacade = ({ selector: selector = '.youtube-facade', muteForAutoplay: muteForAutoplay = true } = {})=>{\n    const playerVars = {\n        playsinline: 1,\n        autoplay: 1,\n        rel: 0\n    };\n    if (muteForAutoplay && (0, $e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc)()) playerVars['mute'] = 1;\n    (0, $e1f0b8fa1ae2171c$export$b93d41a1bb659592)(document, 'click', selector, (event)=>{\n        event.preventDefault();\n        $8d52dbee1a55c811$var$handleVideoClick(event.target.closest(selector), playerVars);\n    });\n    (0, $e1f0b8fa1ae2171c$export$b93d41a1bb659592)(document, 'focusin', selector, (0, $e1f0b8fa1ae2171c$export$e98dfb50c08bef6e), {\n        once: true\n    });\n    // Couldn't use event delegation for this one\n    const els = document.querySelectorAll(selector);\n    els.forEach((el)=>{\n        el.addEventListener('pointerover', (0, $e1f0b8fa1ae2171c$export$e98dfb50c08bef6e), {\n            once: true\n        });\n    });\n};\nfunction $8d52dbee1a55c811$var$handleVideoClick(el, playerVars) {\n    const videoId = (0, $e1f0b8fa1ae2171c$export$959b02de8653989e)(el);\n    const needsYTApi = el.hasAttribute('data-use-youtube-api') || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n    // check if the element has the data-mute-for-mobile attribute and the user is on an iPhone\n    if (el.hasAttribute('data-mute-for-mobile') && (0, $e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc)()) playerVars['mute'] = 1;\n    if (needsYTApi) // create a player using the youtube iframe api\n    $8d52dbee1a55c811$var$renderYoutubePlayer(el, videoId, playerVars);\n    else // create an iframe element and replace the current element with it\n    $8d52dbee1a55c811$var$renderYouTubeIframe(el, videoId, playerVars);\n}\nvar $8d52dbee1a55c811$export$2e2bcd8739ae039 = $8d52dbee1a55c811$var$youtubeFacade;\n\n\nwindow.youtubeFacade = (0, $8d52dbee1a55c811$export$2e2bcd8739ae039);\n\n})();\n//# sourceMappingURL=youtube-facade.js.map\n","import youtubeFacade from './facade';\n\nwindow.youtubeFacade = youtubeFacade;\n","import { getYoutubeVideoId, isMobile, warmConnections, delegateEvent } from './utils';\nimport { createYouTubePlayer } from './loader';\n\n/**\n * Render a youtube player using the youtube iframe api\n *\n * @param {HTMLElement} el\n * @param {String} videoId\n * @param {Array} playerVars\n */\nfunction renderYoutubePlayer(el, videoId, playerVars) {\n  // check if the element has the data-youtube-modal attribute\n  const modal = el.getAttribute('data-youtube-modal');\n\n  let target = el;\n\n  if (modal) {\n    const modalPlaceholder = document.getElementById('youtube-facade-modal-placeholder');\n\n    // create a new iframe element to insert into the modal placeholder element\n    const newDiv = document.createElement('div');\n    newDiv.classList.add('youtube-facade-iframe');\n    modalPlaceholder.appendChild(newDiv);\n    target = newDiv;\n    toggleModal();\n  }\n\n  createYouTubePlayer(target, videoId, playerVars).then((player) => {\n    // console.log(player);\n    window.yfplayer = player;\n  });\n}\n\n/**\n * Render a youtube iframe element\n *\n * @param {HTMLElement} el\n * @param {String} videoId\n * @param {Array} playerVars\n */\nfunction renderYouTubeIframe(el, videoId, playerVars) {\n  const iframe = createYouTubeIframe(videoId, playerVars);\n\n  // check if the element has the data-youtube-modal attribute\n  const modal = el.getAttribute('data-youtube-modal');\n\n  if (modal) {\n    // toggle the modal\n    toggleModal();\n    const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n    modalContent.appendChild(iframe);\n  }\n  else {\n    // replace the element with the iframe\n    el.replaceWith(iframe);\n  }\n}\n\nfunction createYouTubeIframe(videoId, playerVars) {\n  // convert playerVars object to query string\n  const playerVarsString = new URLSearchParams(playerVars).toString();\n\n  const iframe = document.createElement('iframe');\n  iframe.setAttribute('src', `https://www.youtube-nocookie.com/embed/${videoId}?${playerVarsString}`);\n  iframe.setAttribute('width', '720');\n  iframe.setAttribute('height', '405');\n  iframe.setAttribute('class', 'youtube-facade-iframe');\n  iframe.setAttribute('frameborder', '0');\n  iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');\n  iframe.setAttribute('allowfullscreen', '');\n  return iframe;\n}\n\n// on DomContentLoaded add modal code to the body\ndocument.addEventListener('DOMContentLoaded', () => {\n  const modal = document.createElement('div');\n  modal.classList.add('youtube-facade-modal');\n  modal.innerHTML = `\n      <div class=\"youtube-facade-modal-content\">\n        <button class=\"youtube-facade-modal-close\" aria-label=\"Close modal\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path class=\"youtube-facade-model-close-svg\" fill=\"#ffffff\" d=\"M 16.830797 20.000301 L 10.000151 13.16957 L 3.169428 20.000301 L -0 16.830883 L 6.830741 10.000151 L -0 3.169418 L 3.169428 0 L 10.000151 6.830732 L 16.830797 0 L 20 3.169418 L 13.16958 10.000151 L 20 16.830883 Z\"/>\n          </svg>\n        </button>\n        <div class=\"youtube-facade-modal-content-inner\">\n          <div id=\"youtube-facade-modal-placeholder\" class=\"youtube-facade-modal-inner\"></div>\n        </div>\n      </div>\n    `;\n\n  document.body.appendChild(modal);\n\n  // ------ Wire up the close button ------\n\n  const closeButtons = document.querySelectorAll('.youtube-facade-modal-close');\n\n  closeButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      closeModal();\n    });\n  });\n\n  // ------ Wire up the escape key ------\n\n  // add event listener for ESC key and close the modal if it is open\n\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape' || e.key === 'Esc') {\n      closeModal();\n    }\n  });\n});\n\nconst toggleModal = () => {\n  const modal = document.querySelector('.youtube-facade-modal');\n  modal.classList.toggle('youtube-facade-modal-active');\n};\n\nconst closeModal = () => {\n  requestAnimationFrame(() => {\n    const modal = document.querySelector('.youtube-facade-modal');\n    const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n    modalContent.innerHTML = '';\n    // remove class last\n    modal.classList.remove('youtube-facade-modal-active');\n  });\n};\n\n/**\n * Initialize the youtube facade\n *\n * @param {object} options\n * @param {string} options.selector\n * @param {boolean} options.muteForAutoplay\n */\nconst youtubeFacade = ({\n  selector = '.youtube-facade',\n  muteForAutoplay = true,\n} = {}) => {\n  const playerVars = {\n    playsinline: 1,\n    autoplay: 1,\n    rel: 0,\n  };\n\n  if (muteForAutoplay && isMobile()) {\n    playerVars['mute'] = 1;\n  };\n\n  delegateEvent(document, 'click', selector, (event) => {\n    event.preventDefault();\n    handleVideoClick(event.target.closest(selector), playerVars);\n  });\n\n  delegateEvent(document, 'focusin', selector, warmConnections, { once: true });\n\n  // Couldn't use event delegation for this one\n  const els = document.querySelectorAll(selector);\n  els.forEach((el) => {\n    el.addEventListener('pointerover', warmConnections, { once: true });\n  });\n};\n\nfunction handleVideoClick(el, playerVars) {\n  const videoId = getYoutubeVideoId(el);\n  const needsYTApi = el.hasAttribute('data-use-youtube-api') || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n\n  // check if the element has the data-mute-for-mobile attribute and the user is on an iPhone\n  if (el.hasAttribute('data-mute-for-mobile') && isMobile()) {\n    playerVars['mute'] = 1;\n  };\n\n  if (needsYTApi) {\n    // create a player using the youtube iframe api\n    renderYoutubePlayer(el, videoId, playerVars);\n  }\n  else {\n    // create an iframe element and replace the current element with it\n    renderYouTubeIframe(el, videoId, playerVars);\n  }\n}\n\nexport default youtubeFacade;\n","/**\n *\n * @param {string} url\n */\nconst addPreconnect = (url) => {\n  const link = document.createElement('link');\n  link.rel = 'preconnect';\n  link.href = url;\n  document.head.appendChild(link);\n};\n\nconst warmConnections = (function () {\n  let preconnnectsAdded = false;\n  let preconnectUrls = [\n    'https://www.youtube-nocookie.com',\n    'https://www.google.com',\n  ];\n\n  return function () {\n    if (preconnnectsAdded) {\n      return;\n    }\n    preconnectUrls.forEach((url) => {\n      addPreconnect(url);\n    });\n    preconnnectsAdded = true;\n  };\n})();\n\n/**\n * Get the youtube video id from the element data-youtube-id attribute\n * or the href attribute if the data-youtube-id attribute is not present\n *\n * @param {HTMLElement} el\n * @return {string} videoId\n */\nfunction getYoutubeVideoId(el) {\n  let videoId = null;\n  videoId = el.getAttribute('data-youtube-id');\n\n  if (videoId) {\n    return videoId;\n  }\n\n  // parse href of the element and get the video id from the v parameter\n  const href = el.getAttribute('href');\n\n  try {\n    const url = new URL(href);\n    videoId = url.searchParams.get('v');\n  }\n  catch (error) {\n    console.error(error);\n    return null;\n  }\n\n  return videoId;\n};\n\n// function to check viewport width is less than 400px and the user is on a\n// mobile device, and the user agent includes 'Intel Mac OS X'\nfunction isMobile() {\n  return window.innerWidth < 600 && navigator.userAgent.includes('Mobi');\n}\n\n/**\n * Delegate an event to a parent element\n *\n * @param {HTMLElement} parent - The parent element to delegate the event to\n * @param {string} eventType - The type of event to listen for\n * @param {string} selector - The selector for the child elements to delegate the event to\n * @param {Function} handler - The event handler function\n * @param {object} options - The options for the event listener\n */\nfunction delegateEvent(parent, eventType, selector, handler, options = false) {\n  parent.addEventListener(eventType, function (event) {\n    const targetElement = event.target.closest(selector);\n\n    // this is that 'parent' element at this point\n    if (this.contains(targetElement)) {\n      handler.call(targetElement, event);\n    }\n  }, options);\n}\n\nexport { getYoutubeVideoId, isMobile, warmConnections, delegateEvent };\n","// ------ YouTube Iframe API ------\n\n// The API will call this function when the video player is ready.\nfunction onPlayerReady(event) {\n  event.target.playVideo();\n}\n\nlet isYouTubeIframeAPILoaded = false;\nlet youTubeIframeAPIPromise = null;\n\nasync function loadYouTubeIframeAPI() {\n  if (isYouTubeIframeAPILoaded) {\n    let YT = window.YT;\n    return Promise.resolve(YT);\n  }\n\n  if (youTubeIframeAPIPromise) {\n    return youTubeIframeAPIPromise;\n  }\n\n  youTubeIframeAPIPromise = new Promise((resolve) => {\n    var tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    var firstScriptTag = document.getElementsByTagName('script')[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    window.onYouTubeIframeAPIReady = () => {\n      let YT = window.YT;\n      isYouTubeIframeAPILoaded = true;\n      resolve(YT);\n    };\n  });\n\n  return youTubeIframeAPIPromise;\n}\n\nasync function createYouTubePlayer(elementId, videoId, playerVars) {\n  const YT = await loadYouTubeIframeAPI();\n  return new YT.Player(elementId, {\n    width: '720',\n    height: '405',\n    videoId: videoId,\n    allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n    playerVars: playerVars,\n    events: {\n      onReady: onPlayerReady,\n    },\n  });\n};\n\nexport { createYouTubePlayer };\n"],"names":["preconnnectsAdded","preconnectUrls","$e1f0b8fa1ae2171c$var$addPreconnect","url","link","document","createElement","rel","href","head","appendChild","$e1f0b8fa1ae2171c$export$e98dfb50c08bef6e","forEach","$e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc","window","innerWidth","navigator","userAgent","includes","$e1f0b8fa1ae2171c$export$b93d41a1bb659592","parent","eventType","selector","handler","options","addEventListener","event","targetElement","target","closest","contains","call","$4974b39a59fdb5c5$var$onPlayerReady","playVideo","$4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded","$4974b39a59fdb5c5$var$youTubeIframeAPIPromise","$4974b39a59fdb5c5$var$loadYouTubeIframeAPI","Promise","resolve","YT","tag","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","$4974b39a59fdb5c5$export$8ad0bd517c8ab34a","elementId","videoId","playerVars","Player","width","height","allow","events","onReady","modal","classList","add","innerHTML","body","closeButtons","querySelectorAll","button","$8d52dbee1a55c811$var$closeModal","e","key","$8d52dbee1a55c811$var$toggleModal","querySelector","toggle","requestAnimationFrame","modalContent","remove","youtubeFacade","muteForAutoplay","playsinline","autoplay","preventDefault","$8d52dbee1a55c811$var$handleVideoClick","el","getAttribute","URL","searchParams","get","error","console","needsYTApi","hasAttribute","vendor","$8d52dbee1a55c811$var$renderYoutubePlayer","modalPlaceholder","getElementById","newDiv","then","player","yfplayer","$8d52dbee1a55c811$var$renderYouTubeIframe","iframe","$8d52dbee1a55c811$var$createYouTubeIframe","playerVarsString","URLSearchParams","toString","setAttribute","replaceWith","once","els"],"version":3,"file":"youtube-facade.js.map"}