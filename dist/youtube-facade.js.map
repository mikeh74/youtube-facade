{"mappings":"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","sources":["<anon>","src/youtube-facade.js","src/facade.js","src/utils.js","src/loader.js"],"sourcesContent":["(() => {\n/**\n * Adds a preconnect link to the document head for performance optimization.\n * @param {string} url - The URL to preconnect to.\n */ const $e1f0b8fa1ae2171c$var$addPreconnect = (url)=>{\n    if (!url || typeof url !== 'string') {\n        console.error('addPreconnect: Invalid URL');\n        return;\n    }\n    try {\n        const link = document.createElement('link');\n        link.rel = 'preconnect';\n        link.href = url;\n        document.head.appendChild(link);\n    } catch (err) {\n        console.error('addPreconnect: Failed to add preconnect link', err);\n    }\n};\n/**\n * Warms up connections by preconnecting to essential domains for YouTube embeds.\n * Only runs once per session.\n */ const $e1f0b8fa1ae2171c$export$e98dfb50c08bef6e = (()=>{\n    let preconnectsAdded = false;\n    const preconnectUrls = [\n        'https://www.youtube-nocookie.com',\n        'https://www.google.com'\n    ];\n    return ()=>{\n        if (preconnectsAdded) return;\n        preconnectUrls.forEach((url)=>$e1f0b8fa1ae2171c$var$addPreconnect(url));\n        preconnectsAdded = true;\n    };\n})();\n/**\n * Extracts the YouTube video ID from an element's data attribute or href.\n * @param {HTMLElement} el - The element containing the video info.\n * @returns {string|null} The YouTube video ID, or null if not found/invalid.\n */ function $e1f0b8fa1ae2171c$export$959b02de8653989e(el) {\n    if (!el || !(el instanceof HTMLElement)) {\n        console.error('getYoutubeVideoId: Invalid element');\n        return null;\n    }\n    let videoId = el.getAttribute('data-youtube-id');\n    if (videoId) return videoId;\n    const href = el.getAttribute('href');\n    if (!href) return null;\n    try {\n        const url = new URL(href);\n        videoId = url.searchParams.get('v');\n    } catch (error) {\n        console.error('getYoutubeVideoId: Failed to parse href', error);\n        return null;\n    }\n    return videoId;\n}\n/**\n * Checks if the user is on a mobile device (viewport < 600px and user agent contains 'Mobi').\n * @returns {boolean} True if mobile, false otherwise.\n */ function $e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc() {\n    return window.innerWidth < 600 && navigator.userAgent.includes('Mobi');\n}\n/**\n * Delegates an event from a parent to matching child elements.\n * @param {HTMLElement} parent - The parent element to delegate the event to.\n * @param {string} eventType - The type of event to listen for.\n * @param {string} selector - The selector for the child elements.\n * @param {Function} handler - The event handler function.\n * @param {object|boolean} [options=false] - Options for addEventListener.\n */ function $e1f0b8fa1ae2171c$export$b93d41a1bb659592(parent, eventType, selector, handler, options = false) {\n    // Accept document as a valid parent\n    console.log(parent, eventType, selector, handler, options);\n    const isDocument = parent === document;\n    if (!isDocument && !(parent instanceof HTMLElement)) {\n        console.error('delegateEvent: Invalid parent element');\n        return;\n    }\n    if (typeof eventType !== 'string' || typeof selector !== 'string' || typeof handler !== 'function') {\n        console.error('delegateEvent: Invalid arguments');\n        return;\n    }\n    // Use document if parent is document, otherwise use parent\n    const eventTarget = isDocument ? document : parent;\n    eventTarget.addEventListener(eventType, function(event) {\n        const targetElement = event.target.closest(selector);\n        if (targetElement && (isDocument || this.contains(targetElement))) handler.call(targetElement, event);\n    }, options);\n}\n\n\n// ------ YouTube Iframe API ------\n// The API will call this function when the video player is ready.\nfunction $4974b39a59fdb5c5$var$onPlayerReady(event) {\n    event.target.playVideo();\n}\nlet $4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded = false;\nlet $4974b39a59fdb5c5$var$youTubeIframeAPIPromise = null;\n/**\n * Loads the YouTube Iframe API asynchronously and returns the YT object.\n * Adds error handling for script loading and API readiness.\n * @returns {Promise<object>} Resolves with the YT API object.\n */ async function $4974b39a59fdb5c5$var$loadYouTubeIframeAPI() {\n    if ($4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded) {\n        let YT = window.YT;\n        return Promise.resolve(YT);\n    }\n    if ($4974b39a59fdb5c5$var$youTubeIframeAPIPromise) return $4974b39a59fdb5c5$var$youTubeIframeAPIPromise;\n    $4974b39a59fdb5c5$var$youTubeIframeAPIPromise = new Promise((resolve, reject)=>{\n        try {\n            var tag = document.createElement('script');\n            tag.src = 'https://www.youtube.com/iframe_api';\n            tag.onerror = (err)=>{\n                console.error('YouTube Iframe API script failed to load', err);\n                reject(new Error('YouTube Iframe API script failed to load'));\n            };\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            if (!firstScriptTag || !firstScriptTag.parentNode) {\n                console.error('No script tag found in document for YouTube API insertion');\n                reject(new Error('No script tag found in document for YouTube API insertion'));\n                return;\n            }\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            window.onYouTubeIframeAPIReady = ()=>{\n                let YT = window.YT;\n                if (!YT) {\n                    reject(new Error('YouTube Iframe API did not initialize correctly'));\n                    return;\n                }\n                $4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded = true;\n                resolve(YT);\n            };\n        } catch (err) {\n            console.error('Error loading YouTube Iframe API', err);\n            reject(err);\n        }\n    });\n    return $4974b39a59fdb5c5$var$youTubeIframeAPIPromise;\n}\n/**\n * Creates a YouTube player instance using the Iframe API.\n * Adds error handling for missing API or element.\n * @param {HTMLElement|string} elementId - The element or its ID to attach the player to.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n * @returns {Promise<object>} Resolves with the YT.Player instance.\n */ async function $4974b39a59fdb5c5$export$8ad0bd517c8ab34a(elementId, videoId, playerVars) {\n    if (!elementId) throw new Error('createYouTubePlayer: elementId is required');\n    if (!videoId || typeof videoId !== 'string') throw new Error('createYouTubePlayer: videoId is required and must be a string');\n    try {\n        const YT = await $4974b39a59fdb5c5$var$loadYouTubeIframeAPI();\n        return new YT.Player(elementId, {\n            width: '720',\n            height: '405',\n            videoId: videoId,\n            allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n            playerVars: playerVars,\n            events: {\n                onReady: $4974b39a59fdb5c5$var$onPlayerReady\n            }\n        });\n    } catch (err) {\n        console.error('createYouTubePlayer: Failed to create player', err);\n        throw err;\n    }\n}\n\n\n/**\n * Renders a YouTube player using the YouTube iframe API.\n * @param {HTMLElement} el - The element to attach the player to.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n */ function $8d52dbee1a55c811$var$renderYoutubePlayer(el, videoId, playerVars) {\n    if (!el || !(el instanceof HTMLElement)) {\n        console.error('renderYoutubePlayer: Invalid element');\n        return;\n    }\n    const modal = el.getAttribute('data-youtube-modal');\n    let target = el;\n    if (modal) {\n        const modalPlaceholder = document.getElementById('youtube-facade-modal-placeholder');\n        if (!modalPlaceholder) {\n            console.error('renderYoutubePlayer: Modal placeholder not found');\n            return;\n        }\n        const newDiv = document.createElement('div');\n        newDiv.classList.add('youtube-facade-iframe');\n        modalPlaceholder.appendChild(newDiv);\n        target = newDiv;\n        $8d52dbee1a55c811$var$toggleModal();\n    } else {\n        const targetSelector = el.getAttribute('data-target');\n        if (targetSelector) {\n            const targetElement = document.querySelector(targetSelector);\n            if (targetElement) target = targetElement;\n            else console.error('renderYoutubePlayer: Target element not found for selector:', targetSelector);\n        }\n    }\n    (0, $4974b39a59fdb5c5$export$8ad0bd517c8ab34a)(target, videoId, playerVars).then((player)=>{\n        window.yfplayer = player;\n    }).catch((err)=>{\n        console.error('renderYoutubePlayer: Failed to create YouTube player', err);\n    });\n}\n/**\n * Renders a YouTube iframe element (no API).\n * @param {HTMLElement} el - The element to replace or attach the iframe to.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n */ function $8d52dbee1a55c811$var$renderYouTubeIframe(el, videoId, playerVars) {\n    if (!el || !(el instanceof HTMLElement)) {\n        console.error('renderYouTubeIframe: Invalid element');\n        return;\n    }\n    const iframe = $8d52dbee1a55c811$var$createYouTubeIframe(videoId, playerVars);\n    const modal = el.getAttribute('data-youtube-modal');\n    if (modal) {\n        $8d52dbee1a55c811$var$toggleModal();\n        const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n        if (!modalContent) {\n            console.error('renderYouTubeIframe: Modal content not found');\n            return;\n        }\n        modalContent.appendChild(iframe);\n    } else {\n        const targetSelector = el.getAttribute('data-target');\n        if (targetSelector) {\n            const targetElement = document.querySelector(targetSelector);\n            if (targetElement) targetElement.replaceWith(iframe);\n            else {\n                console.error('renderYouTubeIframe: Target element not found for selector:', targetSelector);\n                el.replaceWith(iframe);\n            }\n        } else el.replaceWith(iframe);\n    }\n}\n/**\n * Creates a YouTube iframe element.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n * @returns {HTMLIFrameElement} The created iframe element.\n */ function $8d52dbee1a55c811$var$createYouTubeIframe(videoId, playerVars) {\n    if (!videoId || typeof videoId !== 'string') {\n        console.error('createYouTubeIframe: Invalid videoId');\n        return null;\n    }\n    const playerVarsString = new URLSearchParams(playerVars).toString();\n    const iframe = document.createElement('iframe');\n    iframe.setAttribute('src', `https://www.youtube-nocookie.com/embed/${videoId}?${playerVarsString}`);\n    iframe.setAttribute('width', '720');\n    iframe.setAttribute('height', '405');\n    iframe.setAttribute('class', 'youtube-facade-iframe');\n    iframe.setAttribute('frameborder', '0');\n    iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');\n    iframe.setAttribute('allowfullscreen', '');\n    return iframe;\n}\n// on DomContentLoaded add modal code to the body\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const modal = document.createElement('div');\n    modal.classList.add('youtube-facade-modal');\n    modal.innerHTML = `\n      <div class=\"youtube-facade-modal-content\">\n        <button class=\"youtube-facade-modal-close\" aria-label=\"Close modal\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path class=\"youtube-facade-model-close-svg\" fill=\"#ffffff\" d=\"M 16.830797 20.000301 L 10.000151 13.16957 L 3.169428 20.000301 L -0 16.830883 L 6.830741 10.000151 L -0 3.169418 L 3.169428 0 L 10.000151 6.830732 L 16.830797 0 L 20 3.169418 L 13.16958 10.000151 L 20 16.830883 Z\"/>\n          </svg>\n        </button>\n        <div class=\"youtube-facade-modal-content-inner\">\n          <div id=\"youtube-facade-modal-placeholder\" class=\"youtube-facade-modal-inner\"></div>\n        </div>\n      </div>\n    `;\n    document.body.appendChild(modal);\n    // ------ Wire up the close button ------\n    const closeButtons = document.querySelectorAll('.youtube-facade-modal-close');\n    closeButtons.forEach((button)=>{\n        button.addEventListener('click', ()=>{\n            $8d52dbee1a55c811$var$closeModal();\n        });\n    });\n    // ------ Wire up the escape key ------\n    // add event listener for ESC key and close the modal if it is open\n    document.addEventListener('keydown', (e)=>{\n        if (e.key === 'Escape' || e.key === 'Esc') $8d52dbee1a55c811$var$closeModal();\n    });\n});\nconst $8d52dbee1a55c811$var$toggleModal = ()=>{\n    const modal = document.querySelector('.youtube-facade-modal');\n    if (!modal) {\n        console.error('toggleModal: Modal not found');\n        return;\n    }\n    modal.classList.toggle('youtube-facade-modal-active');\n};\n/**\n * Closes the modal and clears its content.\n */ const $8d52dbee1a55c811$var$closeModal = ()=>{\n    requestAnimationFrame(()=>{\n        const modal = document.querySelector('.youtube-facade-modal');\n        const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n        if (modalContent) modalContent.innerHTML = '';\n        if (modal) modal.classList.remove('youtube-facade-modal-active');\n    });\n};\n/**\n * Initializes the YouTube facade component and event delegation.\n * @param {object} options - Configuration options.\n * @param {string} options.selector - CSS selector for YouTube elements.\n * @param {boolean} options.muteForAutoplay - Whether to mute for autoplay on mobile.\n */ const $8d52dbee1a55c811$var$youtubeFacade = ({ selector: selector = '.youtube-facade', muteForAutoplay: muteForAutoplay = true } = {})=>{\n    const playerVars = {\n        playsinline: 1,\n        autoplay: 1,\n        rel: 0\n    };\n    if (muteForAutoplay && (0, $e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc)()) playerVars['mute'] = 1;\n    (0, $e1f0b8fa1ae2171c$export$b93d41a1bb659592)(document, 'click', selector, (event)=>{\n        event.preventDefault();\n        const el = event.target.closest(selector);\n        if (!el) {\n            console.error('youtubeFacade: Clicked element not found for selector', selector);\n            return;\n        }\n        $8d52dbee1a55c811$var$handleVideoClick(el, playerVars);\n    });\n    (0, $e1f0b8fa1ae2171c$export$b93d41a1bb659592)(document, 'focusin', selector, (0, $e1f0b8fa1ae2171c$export$e98dfb50c08bef6e), {\n        once: true\n    });\n    // Couldn't use event delegation for this one\n    const els = document.querySelectorAll(selector);\n    els.forEach((el)=>{\n        el.addEventListener('pointerover', (0, $e1f0b8fa1ae2171c$export$e98dfb50c08bef6e), {\n            once: true\n        });\n    });\n};\n/**\n * Handles click events for YouTube elements, choosing API or iframe.\n * @param {HTMLElement} el - The clicked element.\n * @param {object} playerVars - Player configuration variables.\n */ function $8d52dbee1a55c811$var$handleVideoClick(el, playerVars) {\n    if (!el || !(el instanceof HTMLElement)) {\n        console.error('handleVideoClick: Invalid element');\n        return;\n    }\n    const videoId = (0, $e1f0b8fa1ae2171c$export$959b02de8653989e)(el);\n    if (!videoId) {\n        console.error('handleVideoClick: No videoId found');\n        return;\n    }\n    const needsYTApi = el.hasAttribute('data-use-youtube-api') || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n    if (el.hasAttribute('data-mute-for-mobile') && (0, $e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc)()) playerVars['mute'] = 1;\n    if (needsYTApi) $8d52dbee1a55c811$var$renderYoutubePlayer(el, videoId, playerVars);\n    else $8d52dbee1a55c811$var$renderYouTubeIframe(el, videoId, playerVars);\n}\nvar $8d52dbee1a55c811$export$2e2bcd8739ae039 = $8d52dbee1a55c811$var$youtubeFacade;\n\n\nwindow.youtubeFacade = (0, $8d52dbee1a55c811$export$2e2bcd8739ae039);\n\n})();\n//# sourceMappingURL=youtube-facade.js.map\n","import youtubeFacade from './facade';\n\nwindow.youtubeFacade = youtubeFacade;\n","import { getYoutubeVideoId, isMobile, warmConnections, delegateEvent } from './utils';\nimport { createYouTubePlayer } from './loader';\n\n/**\n * Renders a YouTube player using the YouTube iframe API.\n * @param {HTMLElement} el - The element to attach the player to.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n */\nfunction renderYoutubePlayer(el, videoId, playerVars) {\n  if (!el || !(el instanceof HTMLElement)) {\n    console.error('renderYoutubePlayer: Invalid element');\n    return;\n  }\n  const modal = el.getAttribute('data-youtube-modal');\n  let target = el;\n  if (modal) {\n    const modalPlaceholder = document.getElementById('youtube-facade-modal-placeholder');\n    if (!modalPlaceholder) {\n      console.error('renderYoutubePlayer: Modal placeholder not found');\n      return;\n    }\n    const newDiv = document.createElement('div');\n    newDiv.classList.add('youtube-facade-iframe');\n    modalPlaceholder.appendChild(newDiv);\n    target = newDiv;\n    toggleModal();\n  } else {\n    const targetSelector = el.getAttribute('data-target');\n    if (targetSelector) {\n      const targetElement = document.querySelector(targetSelector);\n      if (targetElement) {\n        target = targetElement;\n      } else {\n        console.error('renderYoutubePlayer: Target element not found for selector:', targetSelector);\n        // Fall back to using the original element\n      }\n    }\n  }\n  createYouTubePlayer(target, videoId, playerVars)\n    .then((player) => {\n      window.yfplayer = player;\n    })\n    .catch((err) => {\n      console.error('renderYoutubePlayer: Failed to create YouTube player', err);\n    });\n}\n\n/**\n * Renders a YouTube iframe element (no API).\n * @param {HTMLElement} el - The element to replace or attach the iframe to.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n */\nfunction renderYouTubeIframe(el, videoId, playerVars) {\n  if (!el || !(el instanceof HTMLElement)) {\n    console.error('renderYouTubeIframe: Invalid element');\n    return;\n  }\n  const iframe = createYouTubeIframe(videoId, playerVars);\n  const modal = el.getAttribute('data-youtube-modal');\n  if (modal) {\n    toggleModal();\n    const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n    if (!modalContent) {\n      console.error('renderYouTubeIframe: Modal content not found');\n      return;\n    }\n    modalContent.appendChild(iframe);\n  }\n  else {\n    const targetSelector = el.getAttribute('data-target');\n    if (targetSelector) {\n      const targetElement = document.querySelector(targetSelector);\n      if (targetElement) {\n        targetElement.replaceWith(iframe);\n      } else {\n        console.error('renderYouTubeIframe: Target element not found for selector:', targetSelector);\n        el.replaceWith(iframe);\n      }\n    } else {\n      el.replaceWith(iframe);\n    }\n  }\n}\n\n/**\n * Creates a YouTube iframe element.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n * @returns {HTMLIFrameElement} The created iframe element.\n */\nfunction createYouTubeIframe(videoId, playerVars) {\n  if (!videoId || typeof videoId !== 'string') {\n    console.error('createYouTubeIframe: Invalid videoId');\n    return null;\n  }\n  const playerVarsString = new URLSearchParams(playerVars).toString();\n  const iframe = document.createElement('iframe');\n  iframe.setAttribute('src', `https://www.youtube-nocookie.com/embed/${videoId}?${playerVarsString}`);\n  iframe.setAttribute('width', '720');\n  iframe.setAttribute('height', '405');\n  iframe.setAttribute('class', 'youtube-facade-iframe');\n  iframe.setAttribute('frameborder', '0');\n  iframe.setAttribute('allow', 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture');\n  iframe.setAttribute('allowfullscreen', '');\n  return iframe;\n}\n\n// on DomContentLoaded add modal code to the body\ndocument.addEventListener('DOMContentLoaded', () => {\n  const modal = document.createElement('div');\n  modal.classList.add('youtube-facade-modal');\n  modal.innerHTML = `\n      <div class=\"youtube-facade-modal-content\">\n        <button class=\"youtube-facade-modal-close\" aria-label=\"Close modal\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path class=\"youtube-facade-model-close-svg\" fill=\"#ffffff\" d=\"M 16.830797 20.000301 L 10.000151 13.16957 L 3.169428 20.000301 L -0 16.830883 L 6.830741 10.000151 L -0 3.169418 L 3.169428 0 L 10.000151 6.830732 L 16.830797 0 L 20 3.169418 L 13.16958 10.000151 L 20 16.830883 Z\"/>\n          </svg>\n        </button>\n        <div class=\"youtube-facade-modal-content-inner\">\n          <div id=\"youtube-facade-modal-placeholder\" class=\"youtube-facade-modal-inner\"></div>\n        </div>\n      </div>\n    `;\n\n  document.body.appendChild(modal);\n\n  // ------ Wire up the close button ------\n\n  const closeButtons = document.querySelectorAll('.youtube-facade-modal-close');\n\n  closeButtons.forEach((button) => {\n    button.addEventListener('click', () => {\n      closeModal();\n    });\n  });\n\n  // ------ Wire up the escape key ------\n\n  // add event listener for ESC key and close the modal if it is open\n\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape' || e.key === 'Esc') {\n      closeModal();\n    }\n  });\n});\n\nconst toggleModal = () => {\n  const modal = document.querySelector('.youtube-facade-modal');\n  if (!modal) {\n    console.error('toggleModal: Modal not found');\n    return;\n  }\n  modal.classList.toggle('youtube-facade-modal-active');\n};\n\n/**\n * Closes the modal and clears its content.\n */\nconst closeModal = () => {\n  requestAnimationFrame(() => {\n    const modal = document.querySelector('.youtube-facade-modal');\n    const modalContent = document.querySelector('#youtube-facade-modal-placeholder');\n    if (modalContent) {\n      modalContent.innerHTML = '';\n    }\n    if (modal) {\n      modal.classList.remove('youtube-facade-modal-active');\n    }\n  });\n};\n\n/**\n * Initializes the YouTube facade component and event delegation.\n * @param {object} options - Configuration options.\n * @param {string} options.selector - CSS selector for YouTube elements.\n * @param {boolean} options.muteForAutoplay - Whether to mute for autoplay on mobile.\n */\nconst youtubeFacade = ({\n  selector = '.youtube-facade',\n  muteForAutoplay = true,\n} = {}) => {\n  const playerVars = {\n    playsinline: 1,\n    autoplay: 1,\n    rel: 0,\n  };\n  if (muteForAutoplay && isMobile()) {\n    playerVars['mute'] = 1;\n  }\n  delegateEvent(document, 'click', selector, (event) => {\n    event.preventDefault();\n    const el = event.target.closest(selector);\n    if (!el) {\n      console.error('youtubeFacade: Clicked element not found for selector', selector);\n      return;\n    }\n    handleVideoClick(el, playerVars);\n  });\n  delegateEvent(document, 'focusin', selector, warmConnections, { once: true });\n  // Couldn't use event delegation for this one\n  const els = document.querySelectorAll(selector);\n  els.forEach((el) => {\n    el.addEventListener('pointerover', warmConnections, { once: true });\n  });\n};\n\n/**\n * Handles click events for YouTube elements, choosing API or iframe.\n * @param {HTMLElement} el - The clicked element.\n * @param {object} playerVars - Player configuration variables.\n */\nfunction handleVideoClick(el, playerVars) {\n  if (!el || !(el instanceof HTMLElement)) {\n    console.error('handleVideoClick: Invalid element');\n    return;\n  }\n  const videoId = getYoutubeVideoId(el);\n  if (!videoId) {\n    console.error('handleVideoClick: No videoId found');\n    return;\n  }\n  const needsYTApi = el.hasAttribute('data-use-youtube-api') || navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\n  if (el.hasAttribute('data-mute-for-mobile') && isMobile()) {\n    playerVars['mute'] = 1;\n  }\n  if (needsYTApi) {\n    renderYoutubePlayer(el, videoId, playerVars);\n  }\n  else {\n    renderYouTubeIframe(el, videoId, playerVars);\n  }\n}\n\nexport default youtubeFacade;\n","/**\n * Adds a preconnect link to the document head for performance optimization.\n * @param {string} url - The URL to preconnect to.\n */\nconst addPreconnect = (url) => {\n  if (!url || typeof url !== 'string') {\n    console.error('addPreconnect: Invalid URL');\n    return;\n  }\n  try {\n    const link = document.createElement('link');\n    link.rel = 'preconnect';\n    link.href = url;\n    document.head.appendChild(link);\n  }\n  catch (err) {\n    console.error('addPreconnect: Failed to add preconnect link', err);\n  }\n};\n\n/**\n * Warms up connections by preconnecting to essential domains for YouTube embeds.\n * Only runs once per session.\n */\nconst warmConnections = (() => {\n  let preconnectsAdded = false;\n  const preconnectUrls = [\n    'https://www.youtube-nocookie.com',\n    'https://www.google.com',\n  ];\n  return () => {\n    if (preconnectsAdded) return;\n    preconnectUrls.forEach(url => addPreconnect(url));\n    preconnectsAdded = true;\n  };\n})();\n\n/**\n * Extracts the YouTube video ID from an element's data attribute or href.\n * @param {HTMLElement} el - The element containing the video info.\n * @returns {string|null} The YouTube video ID, or null if not found/invalid.\n */\nfunction getYoutubeVideoId(el) {\n  if (!el || !(el instanceof HTMLElement)) {\n    console.error('getYoutubeVideoId: Invalid element');\n    return null;\n  }\n  let videoId = el.getAttribute('data-youtube-id');\n  if (videoId) return videoId;\n  const href = el.getAttribute('href');\n  if (!href) return null;\n  try {\n    const url = new URL(href);\n    videoId = url.searchParams.get('v');\n  }\n  catch (error) {\n    console.error('getYoutubeVideoId: Failed to parse href', error);\n    return null;\n  }\n  return videoId;\n}\n\n/**\n * Checks if the user is on a mobile device (viewport < 600px and user agent contains 'Mobi').\n * @returns {boolean} True if mobile, false otherwise.\n */\nfunction isMobile() {\n  return window.innerWidth < 600 && navigator.userAgent.includes('Mobi');\n}\n\n/**\n * Delegates an event from a parent to matching child elements.\n * @param {HTMLElement} parent - The parent element to delegate the event to.\n * @param {string} eventType - The type of event to listen for.\n * @param {string} selector - The selector for the child elements.\n * @param {Function} handler - The event handler function.\n * @param {object|boolean} [options=false] - Options for addEventListener.\n */\nfunction delegateEvent(parent, eventType, selector, handler, options = false) {\n  // Accept document as a valid parent\n  console.log(parent, eventType, selector, handler, options);\n\n  const isDocument = parent === document;\n  if (!isDocument && !(parent instanceof HTMLElement)) {\n    console.error('delegateEvent: Invalid parent element');\n    return;\n  }\n  if (typeof eventType !== 'string' || typeof selector !== 'string' || typeof handler !== 'function') {\n    console.error('delegateEvent: Invalid arguments');\n    return;\n  }\n  // Use document if parent is document, otherwise use parent\n  const eventTarget = isDocument ? document : parent;\n  eventTarget.addEventListener(eventType, function (event) {\n    const targetElement = event.target.closest(selector);\n    if (targetElement && (isDocument || this.contains(targetElement))) {\n      handler.call(targetElement, event);\n    }\n  }, options);\n}\n\nexport { getYoutubeVideoId, isMobile, warmConnections, delegateEvent };\n","// ------ YouTube Iframe API ------\n\n// The API will call this function when the video player is ready.\nfunction onPlayerReady(event) {\n  event.target.playVideo();\n}\n\nlet isYouTubeIframeAPILoaded = false;\nlet youTubeIframeAPIPromise = null;\n\n/**\n * Loads the YouTube Iframe API asynchronously and returns the YT object.\n * Adds error handling for script loading and API readiness.\n * @returns {Promise<object>} Resolves with the YT API object.\n */\nasync function loadYouTubeIframeAPI() {\n  if (isYouTubeIframeAPILoaded) {\n    let YT = window.YT;\n    return Promise.resolve(YT);\n  }\n  if (youTubeIframeAPIPromise) {\n    return youTubeIframeAPIPromise;\n  }\n  youTubeIframeAPIPromise = new Promise((resolve, reject) => {\n    try {\n      var tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n      tag.onerror = (err) => {\n        console.error('YouTube Iframe API script failed to load', err);\n        reject(new Error('YouTube Iframe API script failed to load'));\n      };\n      var firstScriptTag = document.getElementsByTagName('script')[0];\n      if (!firstScriptTag || !firstScriptTag.parentNode) {\n        console.error('No script tag found in document for YouTube API insertion');\n        reject(new Error('No script tag found in document for YouTube API insertion'));\n        return;\n      }\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n      window.onYouTubeIframeAPIReady = () => {\n        let YT = window.YT;\n        if (!YT) {\n          reject(new Error('YouTube Iframe API did not initialize correctly'));\n          return;\n        }\n        isYouTubeIframeAPILoaded = true;\n        resolve(YT);\n      };\n    }\n    catch (err) {\n      console.error('Error loading YouTube Iframe API', err);\n      reject(err);\n    }\n  });\n  return youTubeIframeAPIPromise;\n}\n\n/**\n * Creates a YouTube player instance using the Iframe API.\n * Adds error handling for missing API or element.\n * @param {HTMLElement|string} elementId - The element or its ID to attach the player to.\n * @param {string} videoId - The YouTube video ID.\n * @param {object} playerVars - Player configuration variables.\n * @returns {Promise<object>} Resolves with the YT.Player instance.\n */\nasync function createYouTubePlayer(elementId, videoId, playerVars) {\n  if (!elementId) {\n    throw new Error('createYouTubePlayer: elementId is required');\n  }\n  if (!videoId || typeof videoId !== 'string') {\n    throw new Error('createYouTubePlayer: videoId is required and must be a string');\n  }\n  try {\n    const YT = await loadYouTubeIframeAPI();\n    return new YT.Player(elementId, {\n      width: '720',\n      height: '405',\n      videoId: videoId,\n      allow: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture',\n      playerVars: playerVars,\n      events: {\n        onReady: onPlayerReady,\n      },\n    });\n  }\n  catch (err) {\n    console.error('createYouTubePlayer: Failed to create player', err);\n    throw err;\n  }\n}\n\nexport { createYouTubePlayer };\n"],"names":["$e1f0b8fa1ae2171c$var$addPreconnect","url","console","error","link","document","createElement","rel","href","head","appendChild","err","$e1f0b8fa1ae2171c$export$e98dfb50c08bef6e","preconnectsAdded","preconnectUrls","forEach","$e1f0b8fa1ae2171c$export$d0a8044dce8ff2fc","window","innerWidth","navigator","userAgent","includes","$e1f0b8fa1ae2171c$export$b93d41a1bb659592","parent","eventType","selector","handler","options","log","isDocument","HTMLElement","eventTarget","addEventListener","event","targetElement","target","closest","contains","call","$4974b39a59fdb5c5$var$onPlayerReady","playVideo","$4974b39a59fdb5c5$var$isYouTubeIframeAPILoaded","$4974b39a59fdb5c5$var$youTubeIframeAPIPromise","$4974b39a59fdb5c5$var$loadYouTubeIframeAPI","Promise","resolve","YT","reject","tag","src","onerror","Error","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","$4974b39a59fdb5c5$export$8ad0bd517c8ab34a","elementId","videoId","playerVars","Player","width","height","allow","events","onReady","modal","classList","add","innerHTML","body","closeButtons","querySelectorAll","button","$8d52dbee1a55c811$var$closeModal","e","key","$8d52dbee1a55c811$var$toggleModal","querySelector","toggle","requestAnimationFrame","modalContent","remove","youtubeFacade","muteForAutoplay","playsinline","autoplay","preventDefault","el","$8d52dbee1a55c811$var$handleVideoClick","getAttribute","URL","searchParams","get","needsYTApi","hasAttribute","vendor","$8d52dbee1a55c811$var$renderYoutubePlayer","modalPlaceholder","getElementById","newDiv","targetSelector","then","player","yfplayer","catch","$8d52dbee1a55c811$var$renderYouTubeIframe","iframe","$8d52dbee1a55c811$var$createYouTubeIframe","playerVarsString","URLSearchParams","toString","setAttribute","replaceWith","once","els"],"version":3,"file":"youtube-facade.js.map"}